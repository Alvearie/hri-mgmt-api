/**
 * (C) Copyright IBM Corp. 2021
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: validate.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	go_oidc "github.com/coreos/go-oidc"
	gomock "github.com/golang/mock/gomock"
	response "ibm.com/watson/health/foundation/hri/common/response"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// GetValidatedClaims mocks base method.
func (m *MockValidator) GetValidatedClaims(requestId, authorization, tenant string) (HriClaims, *response.ErrorDetailResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatedClaims", requestId, authorization, tenant)
	ret0, _ := ret[0].(HriClaims)
	ret1, _ := ret[1].(*response.ErrorDetailResponse)
	return ret0, ret1
}

// GetValidatedClaims indicates an expected call of GetValidatedClaims.
func (mr *MockValidatorMockRecorder) GetValidatedClaims(requestId, authorization, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatedClaims", reflect.TypeOf((*MockValidator)(nil).GetValidatedClaims), requestId, authorization, tenant)
}

// MockoidcProvider is a mock of oidcProvider interface.
type MockoidcProvider struct {
	ctrl     *gomock.Controller
	recorder *MockoidcProviderMockRecorder
}

// MockoidcProviderMockRecorder is the mock recorder for MockoidcProvider.
type MockoidcProviderMockRecorder struct {
	mock *MockoidcProvider
}

// NewMockoidcProvider creates a new mock instance.
func NewMockoidcProvider(ctrl *gomock.Controller) *MockoidcProvider {
	mock := &MockoidcProvider{ctrl: ctrl}
	mock.recorder = &MockoidcProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoidcProvider) EXPECT() *MockoidcProviderMockRecorder {
	return m.recorder
}

// Verifier mocks base method.
func (m *MockoidcProvider) Verifier(config *go_oidc.Config) tokenVerifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verifier", config)
	ret0, _ := ret[0].(tokenVerifier)
	return ret0
}

// Verifier indicates an expected call of Verifier.
func (mr *MockoidcProviderMockRecorder) Verifier(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verifier", reflect.TypeOf((*MockoidcProvider)(nil).Verifier), config)
}

// MocktokenVerifier is a mock of tokenVerifier interface.
type MocktokenVerifier struct {
	ctrl     *gomock.Controller
	recorder *MocktokenVerifierMockRecorder
}

// MocktokenVerifierMockRecorder is the mock recorder for MocktokenVerifier.
type MocktokenVerifierMockRecorder struct {
	mock *MocktokenVerifier
}

// NewMocktokenVerifier creates a new mock instance.
func NewMocktokenVerifier(ctrl *gomock.Controller) *MocktokenVerifier {
	mock := &MocktokenVerifier{ctrl: ctrl}
	mock.recorder = &MocktokenVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenVerifier) EXPECT() *MocktokenVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MocktokenVerifier) Verify(ctx context.Context, rawIDToken string) (ClaimsHolder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, rawIDToken)
	ret0, _ := ret[0].(ClaimsHolder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MocktokenVerifierMockRecorder) Verify(ctx, rawIDToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MocktokenVerifier)(nil).Verify), ctx, rawIDToken)
}
