// Code generated by MockGen. DO NOT EDIT.
// Source: validate.go

// Package auth is a generated GoMock package.
package auth

import (
	gomock "github.com/golang/mock/gomock"
	log "log"
	reflect "reflect"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// GetSignedToken mocks base method
func (m *MockValidator) GetSignedToken(params map[string]interface{}, providerNew NewOidcProvider, logger *log.Logger) (ClaimsHolder, map[string]interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedToken", params, providerNew, logger)
	ret0, _ := ret[0].(ClaimsHolder)
	ret1, _ := ret[1].(map[string]interface{})
	return ret0, ret1
}

// GetSignedToken indicates an expected call of GetSignedToken
func (mr *MockValidatorMockRecorder) GetSignedToken(params, providerNew, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedToken", reflect.TypeOf((*MockValidator)(nil).GetSignedToken), params, providerNew, logger)
}

// CheckTenant mocks base method
func (m *MockValidator) CheckTenant(params map[string]interface{}, claims HriClaims, logger *log.Logger) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTenant", params, claims, logger)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// CheckAudience mocks base method
func (m *MockValidator) CheckAudience(params map[string]interface{}, claims HriClaims, logger *log.Logger) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAudience", params, claims, logger)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// CheckTenant indicates an expected call of CheckTenant
func (mr *MockValidatorMockRecorder) CheckTenant(params, claims, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTenant", reflect.TypeOf((*MockValidator)(nil).CheckTenant), params, claims, logger)
}

// CheckAudience indicates an expected call of CheckTenant
func (mr *MockValidatorMockRecorder) CheckAudience(params, claims, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAudience", reflect.TypeOf((*MockValidator)(nil).CheckAudience), params, claims, logger)
}
