// Code generated by MockGen. DO NOT EDIT.
// Source: connector.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
	reflect "reflect"
)

// MockContextDialer is a mock of ContextDialer interface
type MockContextDialer struct {
	ctrl     *gomock.Controller
	recorder *MockContextDialerMockRecorder
}

// MockContextDialerMockRecorder is the mock recorder for MockContextDialer
type MockContextDialerMockRecorder struct {
	mock *MockContextDialer
}

// NewMockContextDialer creates a new mock instance
func NewMockContextDialer(ctrl *gomock.Controller) *MockContextDialer {
	mock := &MockContextDialer{ctrl: ctrl}
	mock.recorder = &MockContextDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContextDialer) EXPECT() *MockContextDialerMockRecorder {
	return m.recorder
}

// DialContext mocks base method
func (m *MockContextDialer) DialContext(ctx context.Context, networkType, address string) (*kafka.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialContext", ctx, networkType, address)
	ret0, _ := ret[0].(*kafka.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialContext indicates an expected call of DialContext
func (mr *MockContextDialerMockRecorder) DialContext(ctx, networkType, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialContext", reflect.TypeOf((*MockContextDialer)(nil).DialContext), ctx, networkType, address)
}
