// Code generated by MockGen. DO NOT EDIT.
// Source: src/common/eventstreams/service.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	"github.com/confluentinc/confluent-kafka-go/kafka"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method.
func (m *MockService) CreateTopics(ctx context.Context, topics []kafka.TopicSpecification, options ...kafka.CreateTopicsAdminOption) (result []kafka.TopicResult, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopics", ctx, topics, options)
	ret0, _ := ret[0].([]kafka.TopicResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockServiceMockRecorder) CreateTopics(ctx context.Context, topics []kafka.TopicSpecification, options ...kafka.CreateTopicsAdminOption) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopics", reflect.TypeOf((*MockService)(nil).CreateTopics), ctx, topics, options)
}

func (m *MockService) DeleteTopics(ctx context.Context, topics []string, options ...kafka.DeleteTopicsAdminOption) (result []kafka.TopicResult, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopics", ctx, topics, options)
	ret0, _ := ret[0].([]kafka.TopicResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopics indicates an expected call of DeleteTopics.
func (mr *MockServiceMockRecorder) DeleteTopics(ctx context.Context, topics []string, options ...kafka.DeleteTopicsAdminOption) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopics", reflect.TypeOf((*MockService)(nil).DeleteTopics), ctx, topics, options)
}

func (m *MockService) GetMetadata(topic *string, allTopics bool, timeoutMs int) (*kafka.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", topic, allTopics, timeoutMs)
	ret0, _ := ret[0].(*kafka.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockServiceMockRecorder) GetMetadata(topic *string, allTopics bool, timeoutMs int) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockService)(nil).GetMetadata), topic, allTopics, timeoutMs)
}
