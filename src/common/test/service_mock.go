/**
 * (C) Copyright IBM Corp. 2021
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: src/common/eventstreams/service.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	generated "github.com/IBM/event-streams-go-sdk-generator/build/generated"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method.
func (m *MockService) CreateTopic(ctx context.Context, topicCreate generated.TopicCreateRequest) (map[string]interface{}, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topicCreate)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockServiceMockRecorder) CreateTopic(ctx, topicCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockService)(nil).CreateTopic), ctx, topicCreate)
}

// DeleteTopic mocks base method.
func (m *MockService) DeleteTopic(ctx context.Context, topicName string) (map[string]interface{}, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", ctx, topicName)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteTopic indicates an expected call of DeleteTopic.
func (mr *MockServiceMockRecorder) DeleteTopic(ctx, topicName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockService)(nil).DeleteTopic), ctx, topicName)
}

// ListTopics mocks base method.
func (m *MockService) ListTopics(ctx context.Context, localVarOptionals *generated.ListTopicsOpts) ([]generated.TopicDetail, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopics", ctx, localVarOptionals)
	ret0, _ := ret[0].([]generated.TopicDetail)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTopics indicates an expected call of ListTopics.
func (mr *MockServiceMockRecorder) ListTopics(ctx, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockService)(nil).ListTopics), ctx, localVarOptionals)
}

// HandleModelError mocks base method.
func (m *MockService) HandleModelError(err error) *generated.ModelError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleModelError", err)
	ret0, _ := ret[0].(*generated.ModelError)
	return ret0
}

// HandleModelError indicates an expected call of HandleModelError.
func (mr *MockServiceMockRecorder) HandleModelError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleModelError", reflect.TypeOf((*MockService)(nil).HandleModelError), err)
}
